#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("./app")
const debug = require("debug")("thinkmay-client:server")
const http = require("http")
const https = require("https")
const fs = require("fs")

/**
 * Get port from environment and store in Express.
 */


// var server;
// if(process.env.ENV === "production")
// {
// 	var options = 
// 	{
// 		key   : fs.readFileSync('./src/ssl/privkey.pem'),
// 		cert  : fs.readFileSync('./src/ssl/fullchain.pem'), 
// 		ca    : fs.readFileSync('./src/ssl/chain.pem')
// 	}

// 	/**
// 	 * Create HTTP server.
// 	 */
// 	server = https.createServer(options, app).listen("443", function(){
// 		console.log("Express server listening on port 443");
// 	});
// }
// else
// {
// 	const port = normalizePort(process.env.PORT || "3000")
// 	app.set("port", port)
// 	server = http.createServer(app)
// 	server.listen(port)
// }

const port = normalizePort(process.env.PORT || "3000")
app.set("port", port)
server = http.createServer(app)
server.listen(port)

/**
 * Listen on provided port, on all network interfaces.
 */

server.on("error", onError)
server.on("listening", onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10)

	if (isNaN(port)) {
		// named pipe
		return val
	}

	if (port >= 0) {
		// port number
		return port
	}

	return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error
	}

	const bind = typeof port === "string" ? "Pipe " + port : "Port " + port

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case "EACCES":
		console.error(bind + " requires elevated privileges")
		process.exit(1)
		break
	case "EADDRINUSE":
		console.error(bind + " is already in use")
		process.exit(1)
		break
	default:
		throw error
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address()
	const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port
	console.log("Listening on " + bind)
}